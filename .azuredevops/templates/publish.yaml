---
parameters:
  - { name: marketplaceConnection, type: string, default: "" }
  - { name: publisherId, type: string, default: "" }
  - { name: extensionId, type: string, default: "" }
  - { name: extensionName, type: string, default: "" }
  - { name: extensionPricing, type: string, default: "free" }
  - { name: extensionTag, type: string, default: "" }
  - { name: extensionVisibility, type: string, default: "private" }
  - { name: taskNameSuffix, type: string, default: "" }

jobs:
  - job: package
    displayName: Package
    steps:
      - task: NodeTool@0
        inputs:
          versionSource: spec
          versionSpec: 20.x

      - task: Npm@1
        displayName: Install dependencies
        inputs:
          command: custom
          customCommand: run ci
          verbose: false
        env:
          NODE_ENV: production

      - task: Npm@1
        displayName: Run build
        inputs:
          command: custom
          customCommand: run build
          verbose: false

      - task: TfxInstaller@5
        inputs:
          version: "v0.x"

      - task: QueryAzureDevOpsExtensionVersion@5
        continueOnError: true
        name: QueryVersion
        inputs:
          connectTo: "VsTeam"
          connectedServiceName: ${{ parameters.marketplaceConnection }}
          publisherId: ${{ parameters.publisherId }}
          extensionId: ${{ parameters.extensionId }}
          extensionTag: ${{ parameters.extensionTag }}
          versionAction: "Patch"

      - ${{ if ne(parameters.taskNameSuffix, '') }}:
          - bash: |
              echo "Find all task.json files and update the "name" property in place using yq"
              find . -type f -name "task.json" | while read -r file; do
                echo "Updating $file"
                yq eval '.name = (.name + "${{ parameters.taskNameSuffix }}")' -i "$file"
                yq eval '.friendlyName = (.friendlyName + " ${{ parameters.taskNameSuffix }}")' -i "$file"
                cat "$file"
              done
            displayName: "Update task's names with suffix"

      - task: PackageAzureDevOpsExtension@5
        inputs:
          publisherId: ${{ parameters.publisherId }}
          extensionId: ${{ parameters.extensionId }}
          extensionTag: ${{ parameters.extensionTag }}
          extensionName: ${{ parameters.extensionName }}
          extensionPricing: ${{ parameters.extensionPricing }}
          extensionVisibility: ${{ parameters.extensionVisibility }}
          extensionVersion: "$(Extension.Version)"
          updateTasksVersion: true
          updateTasksId: ${{ iif (eq(parameters.extensionVisibility, 'private'), 'true', 'false') }}

      - publish: "${{ parameters.publisherId }}.${{ parameters.extensionId }}${{ parameters.extensionTag }}-$(Extension.Version).vsix"
        artifact: ${{ parameters.extensionVisibility }}

  - deployment: publish
    displayName: Publish
    dependsOn: package
    environment: ${{ parameters.extensionVisibility }}
    variables:
      Extension.Version: $[ dependencies.package.outputs['QueryVersion.Extension.Version'] ]
    strategy:
      runOnce:
        deploy:
          steps:
            - task: TfxInstaller@5
              inputs:
                version: "v0.x"

            - task: PublishAzureDevOpsExtension@5
              inputs:
                connectTo: "VsTeam"
                connectedServiceName: ${{ parameters.marketplaceConnection }}
                fileType: "vsix"
                vsixFile: "$(Pipeline.Workspace)/${{ parameters.extensionVisibility }}/*.vsix"
                updateTasksVersion: false
                noWaitValidation: true
                ${{ if eq(parameters.extensionVisibility, 'private') }}:
                  shareWith: ${{ split(variables['System.CollectionUri'], '/')[3] }}

            - task: IsAzureDevOpsExtensionValid@5
              inputs:
                connectTo: "VsTeam"
                connectedServiceName: ${{ parameters.marketplaceConnection }}
                method: "id"
                publisherId: ${{ parameters.publisherId }}
                extensionId: ${{ parameters.extensionId }}
                extensionTag: ${{ parameters.extensionTag }}
                extensionVersion: "$(Extension.Version)"
